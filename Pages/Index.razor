@page "/"
@using System.Net
@using CovidTracker.Code
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigator

<h1>Welcome to the COVID SAFE System !</h1>

<!-- If the page is in a loading state, show loading message. Otherwise, render the relevant page. -->
@if (LoadState == PageState.Loading) {
    <p>...LOADING...</p>
} else {
    switch (CurrentPage) {
        case Page.Login:
            <!-- Render login page. -->
            <div class="input-group input-group-lg">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-lg">please input your unique identification here</span>
                </div>
                <input @bind="@ID" type="text" class="form-control" aria-label="Large" aria-describedby="inputGroup-sizing-sm">
            </div>
            <button type="button" class="btn btn-primary" @onclick="@Post">Submit</button>
            break;
        case Page.Summary:
            <!-- Render the example summary page. -->
            <div class="alert alert-success" role="alert">
                Congratulation! you complete logging.</div>
            <p>
                *THIS IS EXAMPLE OUTPUT ONLY*<br /><br />
                ID: @ID<br />
                Location: Adelaide<br />
                Phone number: ...<br /><br />
                A server-side log was saved to "@Text".
            </p>
            <button type="button" class="btn btn-primary" @onclick="@HideSummary">Back</button>
            break;
        default:
            <!-- Render error message if we are at an unrecognized page. This should not happen. -->
            <p>Error!</p>
            break;
    }
}

@code {
    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public string ID { get; set; } = "";

    [Parameter]
    public PageState LoadState { get; set; } = PageState.Loaded;

    [Parameter]
    public Page CurrentPage { get; set; } = Page.Login;

    public async void Post()
    {
        Text = "";
        LoadState = PageState.Loading;
        StateHasChanged();
        HttpResponseMessage msg = await AppClient.PostJsonAsync(@Navigator.BaseUri + "api/Login", ID);
        Text = await msg.Content.ReadAsStringAsync();
        LoadState = PageState.Loaded;
        CurrentPage = Page.Summary;
        StateHasChanged();
    }

    public void HideSummary()
    {
        ID = "";
        LoadState = PageState.Loaded;
        CurrentPage = Page.Login;
        StateHasChanged();
    }

    public enum PageState
    {
        Loaded,
        Loading
    }

    public enum Page
    {
        Login,
        Summary
    }
}
