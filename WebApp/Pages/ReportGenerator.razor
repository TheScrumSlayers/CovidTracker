@page "/Report"
@using System.IO;
@using System.Net
@using CovidTracker.Code
@using CovidTracker.Code.Database;
@using CovidTracker.Code.IO;
@using Microsoft.AspNetCore.Identity
@using CovidTracker.Code.Database;
@inject NavigationManager Navigator
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<head>
    <link href="~/css/ReportSpecific.css" rel="stylesheet" />
</head>

<div class="text-center py-3" style="border-bottom: 2px solid #0e4785;">
    <div class="row flex-nowrap justify-content-between align-items-center">
        <div class="col-4 text-center">
            <a class="blog-header-logo text-dark" href="#">
                <img src="logo.png" style="width:80%">
            </a>
        </div><div class="col-4 pt-1"><h2>COVID SAFE SYSTEM</h2></div>

        <div class="col-4 d-flex justify-content-end align-items-center">
            <a class="btn btn-sm btn-outline-secondary" href="#">Welcome</a>
        </div>
    </div>
</div>

@switch(CurrentPage) {
    case Page.Authenticate:
        <!-- This is authentication page shown when first entering the page. -->
        <h1 class="report">Report Generator - Authentication</h1>

        @switch(AuthState) {
            case AuthenticateState.Idle:
                <p>Please upload your authentication key.</p>
                <InputFile OnChange="@SingleUpload"/>

                @if(AuthFail) { 
                    <br /><p style="color:red">Failed to authenticate.</p>
                }
                break;

            case AuthenticateState.Authenticating:
                <p>Authenticating...</p>
                break;
        }
        break;

    case Page.EditReport:

        <!-- This is the people searching form. -->
        <h2 class="report">Search People</h2>
        <div class="fields" style="max-width: 900px">
            <p class="field">ID</p>
            <input class="field" type="number" @bind="@peopleID" />
            <p class="field">Name</p>
            <input class="field" @bind="@peopleName" />
            <p class="field">Phone Number</p>
            <input class="field" type="number" @bind="@peopePhoneNo" />
            <br />
        </div>

        <button @onclick="@SearchPeople">Search</button>

        <!-- This is a table of users which is returned from the people searching form.
             Loops through the users and renders a table row for each. -->
        
        @if(FetchingUsers) { 
            <p>FETCHING USERS...</p>
        } else if (searchUsers.Count == 0) { 
            <p>Search results will appear here.</p>
        } else { 

            <div class="scrollView">
                <table>

                <tr>
                    <th class="report">User ID</th>
                    <th class="report">Name</th>
                    <th class="report">Phone</th>
                    <th class="report">Address Line 1</th>
                    <th class="report">Address Line 2</th>
                    <th class="report">Suburb</th>
                    <th class="report">Postcode</th>
                </tr>

                    @foreach (User user in searchUsers) {
                        <tr class="@((usersToTrack.Contains(user) ? "selectable selected" : "selectable"))" @onclick="() => TrackUser(user)">
                            <td class="report">@user.UserID</td>
                            <td class="report">@user.Name</td>
                            <td class="report">@user.AddressLine1</td>
                            <td class="report">@user.AddressLine2</td>
                            <td class="report">@user.Suburb</td>
                            <td class="report">@user.Postcode</td>
                            <td class="report">@user.PhoneNo</td>
                        </tr>
                    }

                </table>
            </div>
        }

        <!-- Report generation attributes. -->
        <h2 style="padding-top: 20px; padding-bottom: 10px">Report Options:</h2>

        <table>
            <tr>
                <td><p>Before:</p></td>
                <td><input type="date" @bind="@reportBeforeDate" /></td>
                <td><input type="time" @bind="@reportBeforeTime" /></td>
            </tr>
            <tr>
                <td><p>After:</p></td>
                <td><input type="date" @bind="@reportAfterDate" /></td>
                <td><input type="time" @bind="@reportAfterTime" /></td>
            </tr>
            <tr>
                <td><p>Depth:</p></td>
                <td><input style="width:120px" type="number" @bind="@reportNumber" min="1" max="3" /></td>
            </tr>
        </table>

        @if(usersToTrack.Count > 0) {
            <h3 style="padding-top: 20px; padding-bottom: 10px">Persons included</h3>
            <table>
                @foreach (User user in usersToTrack) {
                <tr>
                    <td><p style="width: 300px">ID: @user.UserID (@user.Name).</p></td>
                    <td><button @onclick="() => UntrackUser(user)">Remove</button></td>
                </tr>
                }
            </table>

            <table>
                <tr>
                    <td><button @onclick="@ClearTracked">Clear</button></td>
                    <td><button @onclick="@Submit">Generate</button></td>
                </tr>
            </table>
        }

        break;

    case Page.Loading:
        <h1 class="report">Generating report, please wait...</h1>
        break;

    case Page.ViewReport:
        <!-- This is a human-readable report of contacted people. -->
        <h2 class="report">Report (@generatedReport.Count results)</h2>

        <button @onclick="@BackClicked">Return to report generator</button>
        <table>
            <tr>
                <th class="report">User ID</th>
                <th class="report">Name</th>
                <th class="report">Phone</th>
                <th class="report">Address Line 1</th>
                <th class="report">Address Line 2</th>
                <th class="report">Suburb</th>
                <th class="report">Postcode</th>
            </tr>

        @foreach(User user in generatedReport) { 
            <tr>
                <td class="report">@user.UserID</td>
                <td class="report">@user.Name</td>
                <td class="report">@user.PhoneNo</td>
                <td class="report">@user.AddressLine1</td>
                <td class="report">@user.AddressLine2</td>
                <td class="report">@user.Suburb</td>
                <td class="report">@user.Postcode</td>
            </tr>
        }

        </table>
        break;
}

@code 
{ 
    public int? peopleID = null;
    public string peopleName;
    public ulong? peopePhoneNo = null;

    public DateTime reportBeforeDate = new DateTime(2022, 1, 1);
    public DateTime reportBeforeTime;
    public DateTime reportAfterDate = new DateTime(2019, 1, 1);
    public DateTime reportAfterTime;
    public int reportNumber = 1;

    public List<User> searchUsers = new List<User>();
    public HashSet<User> usersToTrack = new HashSet<User>();
    public List<User> generatedReport = new List<User>();

    [Parameter]
    public Page CurrentPage { get; set; } = Page.Authenticate;

    [Parameter]
    public bool FetchingUsers { get; set; } = false;

    [Parameter]
    public AuthenticateState AuthState { get; set; } = AuthenticateState.Idle;

    [Parameter]
    public bool AuthFail { get; set; } = false;

    private byte[] passwordMemory;

    public async Task SearchPeople()
    {
        searchUsers.Clear();
        FetchingUsers = true;
        await Task.Delay(1);

        IOReturn<List<User>> user = await DatabaseHelper.SearchUsers(passwordMemory, peopleID, peopleName, peopePhoneNo);
        searchUsers = user.Value;

        FetchingUsers = false;
        await Task.Delay(1);
    }

    public void TrackUser(User user)
    {
        if (usersToTrack.Contains(user)) {
            usersToTrack.Remove(user);
        } else {
            usersToTrack.Add(user);
        }
    }

    public void UntrackUser(User user)
    {
        usersToTrack.Remove(user);
    }

    public void ClearTracked()
    {
        usersToTrack.Clear();
    }

    public void BackClicked()
    {
        generatedReport.Clear();
        CurrentPage = Page.EditReport;
        StateHasChanged();
    }

    public async Task Submit()
    {
        searchUsers.Clear();
        generatedReport.Clear();
        CurrentPage = Page.Loading;
        DateTime before = new DateTime(reportBeforeDate.Year, reportBeforeDate.Month, reportBeforeDate.Day, reportBeforeTime.Hour, reportBeforeTime.Minute, reportBeforeTime.Second);
        DateTime after = new DateTime(reportAfterDate.Year, reportAfterDate.Month, reportAfterDate.Day, reportAfterTime.Hour, reportAfterTime.Minute, reportAfterTime.Second);

        // Task.Delay updates the UI due to await.
        await Task.Delay(1);

        IOReturn<List<User>> ret = await DatabaseHelper.GenerateReport(passwordMemory, usersToTrack, reportNumber, before, after);
        generatedReport = ret.Value;
        usersToTrack.Clear();

        CurrentPage = Page.ViewReport;
        await Task.Delay(1);
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        AuthState = AuthenticateState.Authenticating;
        
        MemoryStream stream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(stream);
        passwordMemory = stream.ToArray();

        AuthFail = !await DatabaseHelper.VerifyPassword(passwordMemory);
        AuthState = AuthenticateState.Idle;

        if(!AuthFail) {
            CurrentPage = Page.EditReport;
        }
        await Task.Delay(1);
    }

    public enum Page
    {
        Authenticate,
        EditReport,
        Loading,
        ViewReport
    }

    public enum AuthenticateState
    {
        Idle,
        Authenticating
    }
}
