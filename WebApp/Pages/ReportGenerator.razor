@page "/Report"
@using System.Net
@using CovidTracker.Code
@using CovidTracker.Code.Database;
@using CovidTracker.Code.IO;
@using Microsoft.AspNetCore.Identity
@using CovidTracker.Code.Database;
@inject NavigationManager Navigator
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@switch(CurrentPage) {
    case Page.EditReport:

        <h1>Report Generator</h1>

        <!-- This is the people searching form. -->
        <h2>Search People</h2>
        <p>ID</p>
        <input @bind="@peopleID" />
        <p>Name</p>
        <input @bind="@peopleName" />
        <p>Phone Number</p>
        <input @bind="@peopePhoneNo" />
        <br />
        <button @onclick="@SearchPeople">Search</button>

        <!-- This is a table of users which is returned from the people searching form.
             Loops through the users and renders a table row for each. -->
        
        @if(FetchingUsers) { 
            <p>FETCHING USERS...</p>
        } else if (searchUsers.Count == 0) { 
            <p>Search results will appear here.</p>
        } else { 
            <table>

            <tr>
                <th>User ID</th>
                <th>Name</th>
                <th>Phone</th>
                <th>Address Line 1</th>
                <th>Address Line 2</th>
                <th>Suburb</th>
                <th>Postcode</th>
            </tr>

            @foreach (User user in searchUsers) {
                <tr>
                    <th>@user.UserID</th>
                    <th>@user.Name</th>
                    <th>@user.AddressLine1</th>
                    <th>@user.AddressLine2</th>
                    <th>@user.Suburb</th>
                    <th>@user.Postcode</th>
                    <th>@user.PhoneNo</th>
                    <button @onclick="() => TrackUser(user)">Track</button>
                </tr>
            }
            </table>
        }

        <h2>Generate Report:</h2>
        <p>Before</p>
        <input type="date" @bind="@reportBeforeDate"/>
        <input type="time" @bind="@reportBeforeTime"/>
        <p>After</p>
        <input type="date" @bind="@reportAfterDate"/>
        <input type="time" @bind="@reportAfterTime"/>
        <p>Depth</p>
        <input type="number" @bind="@reportNumber" />
        <h3>Persons included</h3>
        <ul>
            @foreach (User user in usersToTrack) {
                <li>ID: @user.UserID (@user.Name).</li>
            }
        </ul>

        <button @onclick="@Submit">Generate</button>
        break;

    case Page.Loading:
        <h1>Generating report, please wait...</h1>
        break;

    case Page.ViewReport:
        <h2>Report:</h2>

        <table>
            <tr>
                <th>User ID</th>
                <th>Name</th>
                <th>Phone</th>
                <th>Address Line 1</th>
                <th>Address Line 2</th>
                <th>Suburb</th>
                <th>Postcode</th>
            </tr>

        @foreach(User user in generatedReport) { 
            <tr>
                <th>@user.UserID</th>
                <th>@user.Name</th>
                <th>@user.PhoneNo</th>
                <th>@user.AddressLine1</th>
                <th>@user.AddressLine2</th>
                <th>@user.Suburb</th>
                <th>@user.Postcode</th>
            </tr>
        }

        </table>
        break;
}

@code 
{ 
    public string peopleID;
    public string peopleName;
    public string peopePhoneNo;

    public DateTime reportBeforeDate;
    public DateTime reportBeforeTime;
    public DateTime reportAfterDate;
    public DateTime reportAfterTime;
    public int reportNumber;

    public List<User> searchUsers = new List<User>();

    public List<User> usersToTrack = new List<User>();

    public List<User> generatedReport = new List<User>();

    [Parameter]
    public Page CurrentPage { get; set; } = Page.EditReport;

    [Parameter]
    public bool FetchingUsers { get; set; } = false;

    public async Task SearchPeople()
    {
        searchUsers.Clear();
        FetchingUsers = true;
        await Task.Delay(1);

        int? id = string.IsNullOrEmpty(peopleID) ? null : int.TryParse(peopleID, out int z) ? z : null;
        IOReturn<List<User>> user = await DatabaseHelper.SearchUsers(id, peopleName, peopePhoneNo);
        searchUsers = user.Value;

        FetchingUsers = false;
        await Task.Delay(1);
    }

    public void TrackUser(User user)
    {
        if (!usersToTrack.Contains(user)) {
            usersToTrack.Add(user);
        }
    }

    public async Task Submit()
    {
        searchUsers.Clear();
        generatedReport.Clear();
        CurrentPage = Page.Loading;
        DateTime before = new DateTime(reportBeforeDate.Year, reportBeforeDate.Month, reportBeforeDate.Day, reportBeforeTime.Hour, reportBeforeTime.Minute, reportBeforeTime.Second);
        DateTime after = new DateTime(reportAfterDate.Year, reportAfterDate.Month, reportAfterDate.Day, reportAfterTime.Hour, reportAfterTime.Minute, reportAfterTime.Second);

        // Task.Delay updates the UI due to await.
        await Task.Delay(1);

        IOReturn<List<User>> ret = await DatabaseHelper.GenerateReport(usersToTrack, reportNumber, before, after);
        generatedReport = ret.Value;

        CurrentPage = Page.ViewReport;
        await Task.Delay(1);
    }

    public enum Page
    {
        EditReport,
        Loading,
        ViewReport
    }
}
