@page "/Report"
@using System.IO;
@using System.Net
@using CovidTracker.Code
@using CovidTracker.Code.Database;
@using CovidTracker.Code.IO;
@using Microsoft.AspNetCore.Identity
@using CovidTracker.Code.Database;
@inject NavigationManager Navigator
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<head>
    <link href="~/css/ReportSpecific.css" rel="stylesheet" />
</head>

@switch(CurrentPage) {
    case Page.Authenticate:
        <!-- This is authentication page shown when first entering the page. -->
        <h1>Report Generator - Authentication</h1>

        @switch(AuthState) {
            case AuthenticateState.Idle:
                <p>Please upload your authentication key.</p>
                <InputFile OnChange="@SingleUpload"/>

                @if(AuthFail) { 
                    <br /><p style="color:red">Failed to authenticate.</p>
                }
                break;

            case AuthenticateState.Authenticating:
                <p>Authenticating...</p>
                break;
        }
        break;

    case Page.EditReport:

        <!-- This is the people searching form. -->
        <h2>Search People</h2>
        <p>ID</p>
        <input type="number" @bind="@peopleID" />
        <p>Name</p>
        <input @bind="@peopleName" />
        <p>Phone Number</p>
        <input type="number" @bind="@peopePhoneNo" />
        <br />
        <button @onclick="@SearchPeople">Search</button>

        <!-- This is a table of users which is returned from the people searching form.
             Loops through the users and renders a table row for each. -->
        
        @if(FetchingUsers) { 
            <p>FETCHING USERS...</p>
        } else if (searchUsers.Count == 0) { 
            <p>Search results will appear here.</p>
        } else { 

            <div class="scrollView">
                <table>

                <tr>
                    <th>User ID</th>
                    <th>Name</th>
                    <th>Phone</th>
                    <th>Address Line 1</th>
                    <th>Address Line 2</th>
                    <th>Suburb</th>
                    <th>Postcode</th>
                </tr>

                    @foreach (User user in searchUsers) {
                        <tr>
                            <th>@user.UserID</th>
                            <th>@user.Name</th>
                            <th>@user.AddressLine1</th>
                            <th>@user.AddressLine2</th>
                            <th>@user.Suburb</th>
                            <th>@user.Postcode</th>
                            <th>@user.PhoneNo</th>
                            <button @onclick="() => TrackUser(user)">Track</button>
                        </tr>
                    }

                </table>
            </div>
        }

        <!-- Report generation attributes. -->
        <h2>Generate Report:</h2>
        <p>Before</p>
        <input type="date" @bind="@reportBeforeDate"/>
        <input type="time" @bind="@reportBeforeTime"/>
        <p>After</p>
        <input type="date" @bind="@reportAfterDate"/>
        <input type="time" @bind="@reportAfterTime"/>
        <p>Depth</p>
        <input type="number" @bind="@reportNumber" min="1" max="3" />
        <h3>Persons included</h3>
        <ul>
            @foreach (User user in usersToTrack) {
                <li>ID: @user.UserID (@user.Name).</li>
                <button @onclick="() => UntrackUser(user)">Remove</button>
            }
        </ul>
        <button @onclick="@ClearTracked">Clear</button><br />

        <button @onclick="@Submit">Generate</button>
        break;

    case Page.Loading:
        <h1>Generating report, please wait...</h1>
        break;

    case Page.ViewReport:
        <!-- This is a human-readable report of contacted people. -->
        <h2>Report:</h2>

        <button @onclick="@BackClicked">Return to report generator</button>
        <table>
            <tr>
                <th>User ID</th>
                <th>Name</th>
                <th>Phone</th>
                <th>Address Line 1</th>
                <th>Address Line 2</th>
                <th>Suburb</th>
                <th>Postcode</th>
            </tr>

        @foreach(User user in generatedReport) { 
            <tr>
                <th>@user.UserID</th>
                <th>@user.Name</th>
                <th>@user.PhoneNo</th>
                <th>@user.AddressLine1</th>
                <th>@user.AddressLine2</th>
                <th>@user.Suburb</th>
                <th>@user.Postcode</th>
            </tr>
        }

        </table>
        break;
}

@code 
{ 
    public int? peopleID = null;
    public string peopleName;
    public ulong? peopePhoneNo = null;

    public DateTime reportBeforeDate = new DateTime(2022, 1, 1);
    public DateTime reportBeforeTime;
    public DateTime reportAfterDate = new DateTime(2019, 1, 1);
    public DateTime reportAfterTime;
    public int reportNumber = 1;

    public List<User> searchUsers = new List<User>();
    public List<User> usersToTrack = new List<User>();
    public List<User> generatedReport = new List<User>();

    [Parameter]
    public Page CurrentPage { get; set; } = Page.Authenticate;

    [Parameter]
    public bool FetchingUsers { get; set; } = false;

    [Parameter]
    public AuthenticateState AuthState { get; set; } = AuthenticateState.Idle;

    [Parameter]
    public bool AuthFail { get; set; } = false;

    private byte[] passwordMemory;

    public async Task SearchPeople()
    {
        searchUsers.Clear();
        FetchingUsers = true;
        await Task.Delay(1);

        IOReturn<List<User>> user = await DatabaseHelper.SearchUsers(passwordMemory, peopleID, peopleName, peopePhoneNo);
        searchUsers = user.Value;

        FetchingUsers = false;
        await Task.Delay(1);
    }

    public void TrackUser(User user)
    {
        if (!usersToTrack.Contains(user)) {
            usersToTrack.Add(user);
        }
    }

    public void UntrackUser(User user)
    {
        usersToTrack.Remove(user);
    }

    public void ClearTracked()
    {
        usersToTrack.Clear();
    }

    public void BackClicked()
    {
        generatedReport.Clear();
        CurrentPage = Page.EditReport;
        StateHasChanged();
    }

    public async Task Submit()
    {
        searchUsers.Clear();
        generatedReport.Clear();
        CurrentPage = Page.Loading;
        DateTime before = new DateTime(reportBeforeDate.Year, reportBeforeDate.Month, reportBeforeDate.Day, reportBeforeTime.Hour, reportBeforeTime.Minute, reportBeforeTime.Second);
        DateTime after = new DateTime(reportAfterDate.Year, reportAfterDate.Month, reportAfterDate.Day, reportAfterTime.Hour, reportAfterTime.Minute, reportAfterTime.Second);

        // Task.Delay updates the UI due to await.
        await Task.Delay(1);

        IOReturn<List<User>> ret = await DatabaseHelper.GenerateReport(passwordMemory, usersToTrack, reportNumber, before, after);
        generatedReport = ret.Value;
        usersToTrack.Clear();

        CurrentPage = Page.ViewReport;
        await Task.Delay(1);
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        AuthState = AuthenticateState.Authenticating;
        
        MemoryStream stream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(stream);
        passwordMemory = stream.ToArray();

        AuthFail = !await DatabaseHelper.VerifyPassword(passwordMemory);
        AuthState = AuthenticateState.Idle;

        if(!AuthFail) {
            CurrentPage = Page.EditReport;
        }
        await Task.Delay(1);
    }

    public enum Page
    {
        Authenticate,
        EditReport,
        Loading,
        ViewReport
    }

    public enum AuthenticateState
    {
        Idle,
        Authenticating
    }
}
