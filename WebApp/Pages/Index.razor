@page "/"
@using System.Net
@using CovidTracker.Code
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigator
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="text-center py-3" style="border-bottom: 2px solid #0e4785;">
    <div class="row flex-nowrap justify-content-between align-items-center">
        <div class="col-4 text-center">
            <a class="blog-header-logo text-dark" href="#">
                <img src="logo.png" style="width:80%">
            </a>
        </div><div class="col-4 pt-1"><h2>COVID SAFE SYSTEM</h2></div>
        
        <div class="col-4 d-flex justify-content-end align-items-center">
            <a class="btn btn-sm btn-outline-secondary" href="#">Welcome</a>
        </div>
    </div>
</div>

<!-- If the page is in a loading state, show loading message. Otherwise, render the relevant page. -->
@if (LoadState == PageState.Loading) {
    <p>...LOADING...</p>
} else {
    switch (CurrentPage) {
        case Page.Setup:
            <!-- Render the first time setup page. -->
            <div class="my-5 text-center">
                <p>First time setup *WIP*</p><br />
                <p>Address Line 1:</p>
                <input @bind="@SetupAddress1" type="text" class="form-control form-control-lg" id="exampleFormControlInput1"><br />
                <p>Address Line 2:</p>
                <input @bind="@SetupAddress2" type="text" class="form-control form-control-lg" id="exampleFormControlInput1"><br />
                <p>Suburb:</p>
                <input @bind="@SetupSuburb" type="text" class="form-control form-control-lg" id="exampleFormControlInput1"><br />
                <p>Postcode:</p>
                <input @bind="@SetupPostcode" type="text" class="form-control form-control-lg" id="exampleFormControlInput1"><br />
                <button type="button" class="btn btn-primary" @onclick="@SubmitSetup">Submit</button>
            </div>
            break;
        case Page.Login:
            <!-- Render login page. -->
            <div class="py-5 text-center" style="background-color: #ececec;
            background: -webkit-gradient(linear,left top,right top,from(#ececec),to(#f9f9f9));
            background: -o-linear-gradient(left,#ececec,#f9f9f9);
            background: linear-gradient(to right,#ececec,#f9f9f9);">
                <label for="exampleFormControlInput1" class="form-label" style="font-weight: 400; color: #232222;font-size: 1.8rem;">
                    Use the scanner below to scan your QR Code.
                </label>
                <input @bind="@ID" type="text" style="display: none;" id="identifier">
            </div>
            <button id="submitButton" type="button" style="display: none;" @onclick="@Post">Submit</button>
            
            <!-- Render the scan page. -->
            <div class="my-5 d-flex justify-content-center">
                <div id="qr-reader" style="width:500px"></div>
                <div id="qr-reader-results"></div>
            </div>
            <!-- Add the guideline. -->
            <div class="my-5 d-flex justify-content-center">
                   <div class="card" style="width: 18rem;">
                       <img class="card-img-top" src="guideline.gif" />
                       <div class="card-body">
                           <p class="card-text">Here is the guideline of how to use SAFEcheck-in system</p>
                           <li><a href = "https://www.health.gov.au/sites/default/files/documents/2021/03/cdna-national-guidelines-for-the-prevention-control-and-public-health-management-of-covid-19-outbreaks-in-residential-care-facilities-in-australia_0.pdf">or you can check the MOH guideline </a></li>
                       </div>
                   </div>         
            </div>
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target=".bd-example-modal-lg">minimum device requirement</button>
            <div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                   <div class="modal-dialog modal-lg">
                       <div class="modal-content">
                             pixel  >=1770*1770
                      </div>
                  </div>
           </div>

            <script suppress-error="BL9992">function docReady(fn) {
                    // see if DOM is already available
                    if (document.readyState === "complete"
                        || document.readyState === "interactive") {
                        // call on next available tick
                        setTimeout(fn, 2);
                    } else {
                        document.addEventListener("DOMContentLoaded", fn);
                    }
                }

                docReady(function () {

                    Html5Qrcode.getCameras().then(devices => {
                        /**
                         * devices would be an array of objects of type:
                         * { id: "id", label: "label" }
                         */
                        if (devices && devices.length) {
                            var cameraId = devices[0].id;
                            // .. use this to start scanning.

                            var lastResult, countResults = 0;
                            var html5QrCode = new Html5Qrcode("qr-reader");
                            html5QrCode.start(cameraId, 
                                // Function when a code is read.
                                    {
                                        fps: 10, // Optional, frame per seconds for qr code scanning
                                        qrbox: 250 // Optional, if you want bounded box UI
                                    },
                                    (decodedText, decodedResult) => {
                                        if (decodedText !== lastResult) {
                                            ++countResults;
                                            lastResult = decodedText;
                                            // Handle on success condition with the decoded message.
                                            // console.log(`Scan result ${decodedText}`, decodedResult);
                                            var myElement = document.getElementById('identifier');
                                            myElement.value = decodedText;
                                            var event = new Event('change');
                                            myElement.dispatchEvent(event);
                                            setTimeout(function () {
                                                document.getElementById('submitButton').click();
                                            }, 1000);
                                        }
                                    },
                                    (errorMessage) => {
                                        // parse error, ignore it.
                                    })
                                .catch((err) => {
                                    // Start failed, handle it.
                                });
                        }
                    }).catch(err => {
                        // handle err
                    });
                });</script>
            break;
        case Page.Summary:
            <!-- Render the example summary page. -->
            @if (SigninWasSuccessful) {
                <div class="alert alert-success" role="alert">
                    Signin was successful!
                </div>
            } else {
                <div class="alert alert-danger" role="alert">
                    @SigninError
                </div>
            }
            break;
        default:
            <!-- Render error message if we are at an unrecognized page. This should not happen. -->
            <p>Error!</p>
            break;
    }
}

@code {
    [Parameter]
    public string SigninError { get; set; } = "";

    [Parameter]
    public bool SigninWasSuccessful { get; set; } = false;

    [Parameter]
    public string ID { get; set; } = "";

    [Parameter]
    public string SetupAddress1 { get; set; } = "";

    [Parameter]
    public string SetupAddress2 { get; set; } = "";

    [Parameter]
    public string SetupSuburb { get; set; } = "";

    [Parameter]
    public string SetupPostcode { get; set; } = "";

    [Parameter]
    public bool PendingSetupSubmission { get; set; } = false;

    [Parameter]
    public PageState LoadState { get; set; } = PageState.Loaded;

    [Parameter]
    public Page CurrentPage { get; set; } = Page.Setup;

    private TerminalInfo TerminalInfo;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            // Check if local storage exists.
            string check = await localStorage.GetItemAsync<string>("Setup");

            if (string.IsNullOrEmpty(check)) {
                // If it does not, perform first time setup.
                CurrentPage = Page.Setup;
                LoadState = PageState.Loaded;
                StateHasChanged();
            } else {
                // If it does, set the terminal-specific data.
                TerminalInfo = await localStorage.GetItemAsync<TerminalInfo>("Info");
                CurrentPage = Page.Login;
                LoadState = PageState.Loaded;
                StateHasChanged();
            }
        }

        // This code executes if the technician has pressed the setup button.
        if (PendingSetupSubmission) {
            TerminalInfo = new TerminalInfo {
                AddressLine1 = SetupAddress1,
                AddressLine2 = SetupAddress2,
                Suburb = SetupSuburb,
                Postcode = SetupPostcode
            };
            await localStorage.SetItemAsync("Setup", "True");
            await localStorage.SetItemAsync("Info", TerminalInfo);

#if DEBUG
            // Generate example data if in debug mode.
            await TestDataInit();
#endif

            PendingSetupSubmission = false;
            CurrentPage = Page.Login;
            LoadState = PageState.Loaded;
            StateHasChanged();
        }
    }

    public async void SubmitSetup()
    {
        PendingSetupSubmission = true;
        StateHasChanged();
    }

#if DEBUG
    public async Task TestDataInit()
    {
        SigninPostData data = new SigninPostData {
            UserID = "1111",
            DateTime = DateTime.Now,
            TerminalInfo = TerminalInfo
        };

        HttpResponseMessage msg = await AppClient.PostJsonAsync<SigninPostData>(@Navigator.BaseUri + "api/Login", data);
    }
#endif

    public async void Post()
    {
        LoadState = PageState.Loading;
        StateHasChanged();

        SigninPostData data = new SigninPostData {
            UserID = ID,
            DateTime = DateTime.Now,
            TerminalInfo = TerminalInfo
        };

        HttpResponseMessage msg = await AppClient.PostJsonAsync<SigninPostData>(@Navigator.BaseUri + "api/Login", data);
        string msgStr = await msg.Content.ReadAsStringAsync();
        if(msgStr == "SUCCESS") {
            SigninWasSuccessful = true;
            SigninError = "";
        } else {
            SigninWasSuccessful = false;
            SigninError = msgStr;
        }

        // When a signin occurs, the page is swapped to a summary page.
        // After a brief period of time, it returns back to the logging in menu.
        LoadState = PageState.Loaded;
        CurrentPage = Page.Summary;
        StateHasChanged();

        await Task.Delay(SigninWasSuccessful ? 2000 : 5000);

        CurrentPage = Page.Login;
        StateHasChanged();
    }

    public void HideSummary()
    {
        ID = "";
        LoadState = PageState.Loaded;
        CurrentPage = Page.Login;
        StateHasChanged();
    }

    public enum PageState
    {
        Loaded,
        Loading
    }

    public enum Page
    {
        Setup,
        Login,
        Summary
    }
}

<script src="html5-qrcode.min.js" suppress-error="BL9992"></script>
